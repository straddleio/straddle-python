#!/usr/bin/env python3
"""
Smoke‚Äëtest runner for the Straddle Python SDK.
"""

import os
import sys
import logging
from datetime import datetime, date
import random

from dotenv import load_dotenv
from straddle import Client


def main() -> int:
    # 1. Load environment variables from .env
    load_dotenv()

    # 2. Generate a concise timestamp for naming
    timestamp = datetime.now().strftime("%y%m%d%H%M")

    # 3. Set up logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    # 4. Initialize the Straddle client
    try:
        client = Client(
            api_key=os.environ["SANDBOX_API_KEY"],
            base_url=os.getenv("SANDBOX_BASE_URL", "https://api.sandbox.straddle.dev"),
            timeout=30,
            max_retries=2,
        )
        logging.info("‚úÖ Initialized Straddle Client")
    except Exception:
        logging.exception("‚ùå Failed to initialize Straddle Client")
        return 1

    # 5a. Create an organization
    try:
        org = client.embed.organizations.create(
            name=f"PythonSDK Org {timestamp}",
            external_id=f"py_sdk_org_{timestamp}",
            metadata={"created_via": "PythonSDK", "timestamp": timestamp},
        )
        logging.info(f"‚úÖ Created Organization: id={org.data.id}, name={org.data.name}")
    except Exception:
        logging.exception("‚ùå Organization creation failed")
        return 1

    # 5b. Create a business account under that organization
    try:
        account = client.embed.accounts.create(
            organization_id=org.data.id,
            account_type="business",
            business_profile={
                "name":        f"PythonSDK Co {timestamp}",
                "website":     f"https://pysdk-{timestamp}.example.com",
                "legal_name":  "PythonSDK Corporation",
                "description": f"Generated by PythonSDK at {timestamp}",
                "use_case":    "testing-sdk",
                "tax_id":      "000000000",
                "phone":       "+15555550123",
                "address": {
                    "line1":      "123 SDK St",
                    "city":       "Testville",
                    "state":      "CA",
                    "postal_code":"94016",
                    "country":    "US",
                },
                "industry": {
                    "mcc":      "7372",
                    "category": "Software Development",
                    "sector":   "Professional Services",
                },
            },
            access_level="standard",
            external_id=f"py_sdk_acc_{timestamp}",
            metadata={"sdk_test": "true"},
        )
        logging.info(f"‚úÖ Created Account: id={account.data.id}, status={account.data.status}")
    except Exception:
        logging.exception("‚ùå Account creation failed")
        return 1

    # 5c. Retrieve capability statuses for that account
    try:
        resp = client.embed.accounts.get(account.data.id)
        caps = resp.data.capabilities
        logging.info(
            "‚úÖ Capability statuses: "
            f"consent_types.internet={caps.consent_types.internet.capability_status}, "
            f"consent_types.signed_agreement={caps.consent_types.signed_agreement.capability_status}, "
            f"customer_types.businesses={caps.customer_types.businesses.capability_status}, "
            f"customer_types.individuals={caps.customer_types.individuals.capability_status}, "
            f"payment_types.charges={caps.payment_types.charges.capability_status}, "
            f"payment_types.payouts={caps.payment_types.payouts.capability_status}"
        )
    except Exception:
        logging.exception("‚ùå Capability retrieval failed")
        return 1

    # 5d. Create a customer under that account 
    # (** Note: If you are using a SANDBOX_API_KEY for a Platform, the account_id header is required.  If you're using a Marketplace, it is not)
    
    try:
        full_name = f"Python User {timestamp}"
        customer = client.customers.create(
            name=full_name,
            type="individual",
            email=f"python.user.{timestamp}@example.com",
            phone="+11234567890",
            external_id=f"cust_{timestamp}",
            device={"ip_address": "119.252.147.213"},
            straddle_account_id=account.data.id,
        )
        logging.info(
            f"‚úÖ Created Customer: id={customer.data.id}, name={customer.data.name}, email={customer.data.email}"
        )
    except Exception:
        logging.exception("‚ùå Customer creation failed")
        return 1

    # 5e. Create a bank-account paykey using the new customer
    try:
        paykey = client.bridge.link.bank_account(
            customer_id=customer.data.id,
            routing_number="021000018",
            account_number="123456788",
            account_type="checking",
            metadata={
                "key1": f"bank acct {random.randint(0,999)}",
                "key2": f"acct-{timestamp}",
            },
        )
        paykey_id    = paykey.data.id
        paykey_token = paykey.data.paykey
        logging.info(f"‚úÖ Created Paykey: id={paykey_id}")
    except Exception:
        logging.exception("‚ùå Paykey creation failed")
        return 1

    # 5f. Create a charge
    try:
        charge = client.charges.create(
            paykey=paykey_token,
            description=f"PythonSDK Subscription fee {random.uniform(1,100):.2f}",
            amount=int(random.uniform(1,100) * 100),
            currency="USD",
            payment_date=date.today().isoformat(),
            consent_type="internet",
            device={"ip_address": "192.168.1.100", "user_agent": "PythonSDK/1.0"},
            external_id=f"ORDER{random.randint(1000,9999)}_{timestamp}",
            config={"balance_check": "Disabled", "sandbox_outcome": "paid"},
            metadata={"customer_type": "premium", "promo_code": f"PC{timestamp}"},
            straddle_account_id=account.data.id,
        )
        logging.info(
            f"‚úÖ Created Charge: id={charge.data.id}, status={charge.data.status}, description={charge.data.description}"
        )
    except Exception:
        logging.exception("‚ùå Charge creation failed")
        return 1

    # 5g. Create a payout
    try:
        payout = client.payouts.create(
            paykey=paykey_token,
            description=f"PythonSDK Monthly fee {random.uniform(1,100):.2f}",
            amount=charge.data.amount,
            currency="USD",
            payment_date=date.today().isoformat(),
            device={"ip_address": "192.168.1.100", "user_agent": "PythonSDK/1.0"},
            external_id=f"PAYOUT{random.randint(1000,9999)}_{timestamp}",
            config={"balance_check": "Enabled", "sandbox_outcome": "cancelled_for_balance_check"},
            metadata={"customer_type": "premium", "promo_code": f"PC{timestamp}"},
            straddle_account_id=account.data.id,
        )
        logging.info(
            f"‚úÖ Created Payout: id={payout.data.id}, status={payout.data.status}, description={payout.data.description}"
        )
    except Exception:
        logging.exception("‚ùå Payout creation failed")
        return 1

    # 5h. List recent payments and filter ours
    try:
        payments = client.payments.list(default_page_size=20)
        sdk_payments = [p for p in payments if "PythonSDK" in p.description]
        if not sdk_payments:
            raise ValueError("No PythonSDK payments found")
        for p in sdk_payments:
            logging.info(
                f"‚Ä¢ Payment {p.id}: {p.amount} {p.currency} (status={p.status}) ‚Äì desc: {p.description}"
            )
    except Exception:
        logging.exception("‚ùå Listing payments failed")
        return 1

    # 5i. List customers for that account
    try:
        customers = client.customers.list(straddle_account_id=account.data.id)
        if not customers:
            raise ValueError("No customers found for account")
        for c in customers:
            logging.info(
                f"‚Ä¢ Customer {c.id}: {c.name} (email: {c.email})"
            )
    except Exception:
        logging.exception("‚ùå Listing customers failed")
        return 1

    logging.info("üéâ Smoke test completed successfully!")
    return 0


if __name__ == "__main__":
    sys.exit(main())
